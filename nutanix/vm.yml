---
- name: VM playbook
  hosts: localhost
  gather_facts: false
  collections:
    - nutanix.ncp
  module_defaults:
    group/nutanix.ncp.ntnx:
      nutanix_host: "{{ lookup('env', 'PRISM_CENTRAL_URL') }}"
      nutanix_username: "{{ lookup('env', 'PRISM_CENTRAL_USERNAME') }}"
      nutanix_password: "{{ lookup('env', 'PRISM_CENTRAL_PASSWORD') }}"
      validate_certs: false
  vars:
    hostname:  '{{ variable_hostname }}'
    hostip:  "{{ variable_pass }}"
    num_vcpus:  '{{ variable_vcpus }}'
    memory_gb:  '{{ variable_vram }}'
    requestor_name:  "{{ variable_requestor }}"
  tasks:  
  - name: Setting Variables
    set_fact:
        cluster_name: "CLS"
        subnet_name: 'TBS\|TEST\|Generic-44'
        image_name: '{{ variable_os }}'

  - name: Determine if the VM OS is Linux or Windows
    set_fact:
      is_linux: "{{ 'linux' in image_name.lower() }}"
      is_windows: "{{ 'windows' in image_name.lower() }}"
      
  - name: Set boot type and customization method
    set_fact:
      boot_type: "{{ 'UEFI' if is_windows else 'LEGACY' | trim }}"
      os_type: "{{ 'Windows' if is_windows else 'Linux' | trim }}"

  - name: Debug boot_type
    debug:
      msg: "The boot type is set to {{ boot_type }}"

  - name: create Vm
    ntnx_vms:
      state: present
      name: "{{ hostname }}"
#      owner: "{{ requestor_name }}"
      desc: "ansible_automation_platform"
      categories:
        OSType:
          - "{{os_type}}"
      cluster:
        name: "{{cluster_name}}"
      networks:
        - is_connected: True
          subnet:
            name: "{{ subnet_name }}"
            cluster:
              name: "{{cluster_name}}"
          private_ip: "{{ hostip }}"              
      disks:
        - type: "DISK"
          bus: "SCSI"
          clone_image:
            name: "{{ image_name }}"
      vcpus: "{{ num_vcpus }}"
      cores_per_vcpu: 1
      memory_gb:  "{{ memory_gb }}"
      boot_config:
        boot_type: "{{ boot_type }}"
    register: output

  - name: output of vm created
    debug:
      msg: '{{ output }}'

 # - name: delete VM
 #   ntnx_vms:
 #     state: absent
 #     vm_uuid: "{{output.vm_uuid}}"
